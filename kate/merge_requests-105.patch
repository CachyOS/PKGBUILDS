From 895160f40b9f55c50a17f7a9d968b952bcac4f50 Mon Sep 17 00:00:00 2001
From: Christoph Cullmann <cullmann@kde.org>
Date: Sun, 27 Sep 2020 14:13:24 +0200
Subject: [PATCH 1/3] improve Kate config dialog

GUI: improved config dialog

remove tree, plain list

avoid application/editor separation

move editor component things to top, as that is the stuff
most people want to change, e.g. fonts/colors/editing behaviors
---
 kate/kateconfigdialog.cpp | 117 +++++++++++++++++++-------------------
 kate/kateconfigdialog.h   |  29 +++++-----
 kate/katemainwindow.cpp   |   2 +-
 3 files changed, 73 insertions(+), 75 deletions(-)

diff --git a/kate/kateconfigdialog.cpp b/kate/kateconfigdialog.cpp
index 46f9f9dd4..22c543230 100644
--- a/kate/kateconfigdialog.cpp
+++ b/kate/kateconfigdialog.cpp
@@ -8,8 +8,6 @@
 
 #include "kateconfigdialog.h"
 
-#include "ui_sessionconfigwidget.h"
-
 #include "kateapp.h"
 #include "kateconfigplugindialogpage.h"
 #include "katedebug.h"
@@ -38,34 +36,47 @@
 #include <QLabel>
 #include <QVBoxLayout>
 
-KateConfigDialog::KateConfigDialog(KateMainWindow *parent, KTextEditor::View *view)
+KateConfigDialog::KateConfigDialog(KateMainWindow *parent)
     : KPageDialog(parent)
     , m_mainWindow(parent)
-    , m_view(view)
 {
-    setFaceType(Tree);
+  //  setFaceType(List);
     setWindowTitle(i18n("Configure"));
     setStandardButtons(QDialogButtonBox::Ok | QDialogButtonBox::Apply | QDialogButtonBox::Cancel | QDialogButtonBox::Help);
     setObjectName(QStringLiteral("configdialog"));
 
-    KSharedConfig::Ptr config = KSharedConfig::openConfig();
-    KConfigGroup cgGeneral = KConfigGroup(config, "General");
+    // first: add the KTextEditor config pages
+    // rational: most people want to alter e.g. the fonts, the colors or some other editor stuff first
+    addEditorPages();
 
+    // second: add out own config pages
+    // this includes all plugin config pages, added to the bottom
+    addBehaviorPage();
+    addSessionPage();
+    addFeedbackPage();
+    addPluginsPage();
+    addPluginPages();
+
+    // handle dialog actions
+    connect(this, &KateConfigDialog::accepted, this, &KateConfigDialog::slotApply);
+    connect(buttonBox()->button(QDialogButtonBox::Apply), &QPushButton::clicked, this, &KateConfigDialog::slotApply);
+    connect(buttonBox()->button(QDialogButtonBox::Help), &QPushButton::clicked, this, &KateConfigDialog::slotHelp);
+    connect(this, &KateConfigDialog::currentPageChanged, this, &KateConfigDialog::slotCurrentPageChanged);
+
+    // ensure no stray signals already set this!
     buttonBox()->button(QDialogButtonBox::Apply)->setEnabled(false);
+    m_dataChanged = false;
+}
 
-    KPageWidgetItem *applicationItem = addPage(new QWidget, i18n("Application"));
-    applicationItem->setIcon(QIcon::fromTheme(QStringLiteral("preferences-other")));
-    applicationItem->setHeader(i18n("Application Options"));
-    applicationItem->setCheckable(false);
-    applicationItem->setEnabled(false);
-    m_applicationPage = applicationItem;
+void KateConfigDialog::addBehaviorPage()
+{
+    KSharedConfig::Ptr config = KSharedConfig::openConfig();
+    KConfigGroup cgGeneral = KConfigGroup(config, "General");
 
-    // BEGIN General page
     QFrame *generalFrame = new QFrame;
-    KPageWidgetItem *item = addSubPage(applicationItem, generalFrame, i18n("General"));
-    item->setHeader(i18n("General Options"));
+    KPageWidgetItem *item = addPage(generalFrame, i18n("Behavior"));
+    item->setHeader(i18n("Behavior Options"));
     item->setIcon(QIcon::fromTheme(QStringLiteral("go-home")));
-    setCurrentPage(item);
 
     QVBoxLayout *layout = new QVBoxLayout(generalFrame);
     layout->setContentsMargins(0, 0, 0, 0);
@@ -77,7 +88,7 @@ KateConfigDialog::KateConfigDialog(KateMainWindow *parent, KTextEditor::View *vi
 
     // modified files notification
     m_modNotifications = new QCheckBox(i18n("Wa&rn about files modified by foreign processes"), buttonGroup);
-    m_modNotifications->setChecked(parent->modNotificationEnabled());
+    m_modNotifications->setChecked(m_mainWindow->modNotificationEnabled());
     m_modNotifications->setWhatsThis(
         i18n("If enabled, when Kate receives focus you will be asked what to do with "
              "files that have been modified on the hard disk. If not enabled, you will "
@@ -89,7 +100,7 @@ KateConfigDialog::KateConfigDialog(KateMainWindow *parent, KTextEditor::View *vi
 
     // Closing last file closes Kate
     m_modCloseAfterLast = new QCheckBox(i18n("Close Kate entirely when the last file is closed"), buttonGroup);
-    m_modCloseAfterLast->setChecked(parent->modCloseAfterLast());
+    m_modCloseAfterLast->setChecked(m_mainWindow->modCloseAfterLast());
     m_modCloseAfterLast->setWhatsThis(
         i18n("If enabled, Kate will shutdown when the last file being edited is closed, "
              "otherwise a blank page will open so that you can start a new file."));
@@ -185,15 +196,19 @@ KateConfigDialog::KateConfigDialog(KateMainWindow *parent, KTextEditor::View *vi
     layout->addWidget(buttonGroup);
 
     layout->addStretch(1); // :-] works correct without autoadd
-    // END General page
+}
+
+void KateConfigDialog::addSessionPage()
+{
+    KSharedConfig::Ptr config = KSharedConfig::openConfig();
+    KConfigGroup cgGeneral = KConfigGroup(config, "General");
 
-    // BEGIN Session page
     QWidget *sessionsPage = new QWidget();
-    item = addSubPage(applicationItem, sessionsPage, i18n("Session"));
+    auto item = addPage(sessionsPage, i18n("Session"));
     item->setHeader(i18n("Session Management"));
     item->setIcon(QIcon::fromTheme(QStringLiteral("view-history")));
 
-    sessionConfigUi = new Ui::SessionConfigWidget();
+    sessionConfigUi.reset(new Ui::SessionConfigWidget());
     sessionConfigUi->setupUi(sessionsPage);
 
     // restore view  config
@@ -214,9 +229,10 @@ KateConfigDialog::KateConfigDialog(KateMainWindow *parent, KTextEditor::View *vi
     connect(sessionConfigUi->startNewSessionRadioButton, &QRadioButton::toggled, this, &KateConfigDialog::slotChanged);
     connect(sessionConfigUi->loadLastUserSessionRadioButton, &QRadioButton::toggled, this, &KateConfigDialog::slotChanged);
     connect(sessionConfigUi->manuallyChooseSessionRadioButton, &QRadioButton::toggled, this, &KateConfigDialog::slotChanged);
-    // END Session page
+}
 
-    // BEGIN Plugins page
+void KateConfigDialog::addPluginsPage()
+{
     QFrame *page = new QFrame(this);
     QVBoxLayout *vlayout = new QVBoxLayout(page);
     vlayout->setContentsMargins(0, 0, 0, 0);
@@ -226,22 +242,17 @@ KateConfigDialog::KateConfigDialog(KateMainWindow *parent, KTextEditor::View *vi
     vlayout->addWidget(configPluginPage);
     connect(configPluginPage, &KateConfigPluginPage::changed, this, &KateConfigDialog::slotChanged);
 
-    item = addSubPage(applicationItem, page, i18n("Plugins"));
+    auto item = addPage(page, i18n("Plugins"));
     item->setHeader(i18n("Plugin Manager"));
     item->setIcon(QIcon::fromTheme(QStringLiteral("preferences-plugin")));
+}
 
-    const KatePluginList &pluginList(KateApp::self()->pluginManager()->pluginList());
-    for (const KatePluginInfo &plugin : pluginList) {
-        if (plugin.load) {
-            addPluginPage(plugin.plugin);
-        }
-    }
-    // END Plugins page
-
+void KateConfigDialog::addFeedbackPage()
+{
 #ifdef WITH_KUSERFEEDBACK
     // KUserFeedback Config
-    page = new QFrame(this);
-    vlayout = new QVBoxLayout(page);
+    auto page = new QFrame(this);
+    auto vlayout = new QVBoxLayout(page);
     vlayout->setContentsMargins(0, 0, 0, 0);
     vlayout->setSpacing(0);
 
@@ -250,34 +261,20 @@ KateConfigDialog::KateConfigDialog(KateMainWindow *parent, KTextEditor::View *vi
     connect(m_userFeedbackWidget, &KUserFeedback::FeedbackConfigWidget::configurationChanged, this, &KateConfigDialog::slotChanged);
     vlayout->addWidget(m_userFeedbackWidget);
 
-    item = addSubPage(applicationItem, page, i18n("User Feedback"));
+    auto item = addPage(page, i18n("User Feedback"));
     item->setHeader(i18n("User Feedback"));
     item->setIcon(QIcon::fromTheme(QStringLiteral("preferences-desktop-locale")));
 #endif
-
-    // editor widgets from kwrite/kwdialog
-    m_editorPage = addPage(new QWidget, i18n("Editor Component"));
-    m_editorPage->setIcon(QIcon::fromTheme(QStringLiteral("accessories-text-editor")));
-    m_editorPage->setHeader(i18n("Editor Component Options"));
-    m_editorPage->setCheckable(false);
-    m_editorPage->setEnabled(false);
-
-    addEditorPages();
-
-    connect(this, &KateConfigDialog::accepted, this, &KateConfigDialog::slotApply);
-    connect(buttonBox()->button(QDialogButtonBox::Apply), &QPushButton::clicked, this, &KateConfigDialog::slotApply);
-    connect(buttonBox()->button(QDialogButtonBox::Help), &QPushButton::clicked, this, &KateConfigDialog::slotHelp);
-    connect(this, &KateConfigDialog::currentPageChanged, this, &KateConfigDialog::slotCurrentPageChanged);
-
-    resize(minimumSizeHint());
-
-    // ensure no stray signals already set this!
-    m_dataChanged = false;
 }
 
-KateConfigDialog::~KateConfigDialog()
+void KateConfigDialog::addPluginPages()
 {
-    delete sessionConfigUi;
+    const KatePluginList &pluginList(KateApp::self()->pluginManager()->pluginList());
+    for (const KatePluginInfo &plugin : pluginList) {
+        if (plugin.load) {
+            addPluginPage(plugin.plugin);
+        }
+    }
 }
 
 void KateConfigDialog::addEditorPages()
@@ -286,7 +283,7 @@ void KateConfigDialog::addEditorPages()
         KTextEditor::ConfigPage *page = KTextEditor::Editor::instance()->configPage(i, this);
         connect(page, &KTextEditor::ConfigPage::changed, this, &KateConfigDialog::slotChanged);
         m_editorPages.push_back(page);
-        KPageWidgetItem *item = addSubPage(m_editorPage, page, page->name());
+        KPageWidgetItem *item = addPage(page, page->name());
         item->setHeader(page->fullName());
         item->setIcon(page->icon());
     }
@@ -303,7 +300,7 @@ void KateConfigDialog::addPluginPage(KTextEditor::Plugin *plugin)
         KTextEditor::ConfigPage *cp = plugin->configPage(i, page);
         page->layout()->addWidget(cp);
 
-        KPageWidgetItem *item = addSubPage(m_applicationPage, page, cp->name());
+        KPageWidgetItem *item = addPage(page, cp->name());
         item->setHeader(cp->fullName());
         item->setIcon(cp->icon());
 
diff --git a/kate/kateconfigdialog.h b/kate/kateconfigdialog.h
index 03fd3b313..8b75c234e 100644
--- a/kate/kateconfigdialog.h
+++ b/kate/kateconfigdialog.h
@@ -18,21 +18,20 @@
 
 #include <KPageDialog>
 
+#include <memory>
+
 #ifdef WITH_KUSERFEEDBACK
 #include <KUserFeedback/FeedbackConfigWidget>
 #endif
 
+#include "ui_sessionconfigwidget.h"
+
 class QCheckBox;
 class QComboBox;
 class QSpinBox;
 class KateMainWindow;
 class KPluralHandlingSpinBox;
 
-namespace Ui
-{
-class SessionConfigWidget;
-}
-
 struct PluginPageListItem {
     KTextEditor::Plugin *plugin;
     int idInPlugin;
@@ -46,8 +45,7 @@ class KateConfigDialog : public KPageDialog
     Q_OBJECT
 
 public:
-    KateConfigDialog(KateMainWindow *parent, KTextEditor::View *view);
-    ~KateConfigDialog() override;
+    KateConfigDialog(KateMainWindow *parent);
 
 public: // static
     /**
@@ -72,9 +70,16 @@ protected:
     void closeEvent(QCloseEvent *event) override;
 
 private:
-    KateMainWindow *m_mainWindow;
+    void addBehaviorPage();
+    void addSessionPage();
+    void addPluginsPage();
+    void addFeedbackPage();
+    void addPluginPages();
+    void addEditorPages();
+
+private:
+    KateMainWindow * const m_mainWindow;
 
-    KTextEditor::View *m_view;
     bool m_dataChanged = false;
 
     QCheckBox *m_modNotifications;
@@ -86,14 +91,10 @@ private:
     QSpinBox *m_tabLimit;
 
     // Sessions Page
-    Ui::SessionConfigWidget *sessionConfigUi;
+    std::unique_ptr<Ui::SessionConfigWidget> sessionConfigUi;
 
     QHash<KPageWidgetItem *, PluginPageListItem *> m_pluginPages;
     QList<KTextEditor::ConfigPage *> m_editorPages;
-    KPageWidgetItem *m_applicationPage;
-    KPageWidgetItem *m_editorPage;
-
-    void addEditorPages();
 
 #ifdef WITH_KUSERFEEDBACK
     KUserFeedback::FeedbackConfigWidget *m_userFeedbackWidget = nullptr;
diff --git a/kate/katemainwindow.cpp b/kate/katemainwindow.cpp
index 96f31c491..130a53612 100644
--- a/kate/katemainwindow.cpp
+++ b/kate/katemainwindow.cpp
@@ -843,7 +843,7 @@ bool KateMainWindow::showPluginConfigPage(KTextEditor::Plugin *configpageinterfa
         return false;
     }
 
-    KateConfigDialog *dlg = new KateConfigDialog(this, m_viewManager->activeView());
+    KateConfigDialog *dlg = new KateConfigDialog(this);
     if (configpageinterface) {
         dlg->showAppPluginPage(configpageinterface, id);
     }
-- 
GitLab


From 99f4e68146ca08b60d5d2bbe0b087fc63c4c4033 Mon Sep 17 00:00:00 2001
From: Christoph Cullmann <cullmann@kde.org>
Date: Sun, 27 Sep 2020 18:25:08 +0200
Subject: [PATCH 2/3] move meta info session storage option to sessions page

---
 kate/kateconfigdialog.cpp      | 93 ++++++++++++----------------------
 kate/kateconfigdialog.h        |  7 +--
 kate/ui/sessionconfigwidget.ui | 69 +++++++++++++++++++------
 3 files changed, 86 insertions(+), 83 deletions(-)

diff --git a/kate/kateconfigdialog.cpp b/kate/kateconfigdialog.cpp
index 22c543230..2b8ca0c2f 100644
--- a/kate/kateconfigdialog.cpp
+++ b/kate/kateconfigdialog.cpp
@@ -40,10 +40,8 @@ KateConfigDialog::KateConfigDialog(KateMainWindow *parent)
     : KPageDialog(parent)
     , m_mainWindow(parent)
 {
-  //  setFaceType(List);
     setWindowTitle(i18n("Configure"));
     setStandardButtons(QDialogButtonBox::Ok | QDialogButtonBox::Apply | QDialogButtonBox::Cancel | QDialogButtonBox::Help);
-    setObjectName(QStringLiteral("configdialog"));
 
     // first: add the KTextEditor config pages
     // rational: most people want to alter e.g. the fonts, the colors or some other editor stuff first
@@ -109,50 +107,13 @@ void KateConfigDialog::addBehaviorPage()
     vbox->addWidget(m_modCloseAfterLast);
     buttonGroup->setLayout(vbox);
 
-    // GROUP with the one below: "Meta-information"
-    buttonGroup = new QGroupBox(i18n("Meta-Information"), generalFrame);
-    vbox = new QVBoxLayout;
-    layout->addWidget(buttonGroup);
-
-    // save meta infos
-    m_saveMetaInfos = new QCheckBox(buttonGroup);
-    m_saveMetaInfos->setText(i18n("Keep &meta-information past sessions"));
-    m_saveMetaInfos->setChecked(KateApp::self()->documentManager()->getSaveMetaInfos());
-    m_saveMetaInfos->setWhatsThis(
-        i18n("Check this if you want document configuration like for example "
-             "bookmarks to be saved past editor sessions. The configuration will be "
-             "restored if the document has not changed when reopened."));
-    connect(m_saveMetaInfos, &QCheckBox::toggled, this, &KateConfigDialog::slotChanged);
-
-    vbox->addWidget(m_saveMetaInfos);
-
-    // meta infos days
-    QFrame *metaInfos = new QFrame(buttonGroup);
-    QHBoxLayout *hlayout = new QHBoxLayout(metaInfos);
-
-    metaInfos->setEnabled(KateApp::self()->documentManager()->getSaveMetaInfos());
-    QLabel *label = new QLabel(i18n("&Delete unused meta-information after:"), metaInfos);
-    hlayout->addWidget(label);
-    m_daysMetaInfos = new KPluralHandlingSpinBox(metaInfos);
-    m_daysMetaInfos->setMaximum(180);
-    m_daysMetaInfos->setSpecialValueText(i18nc("The special case of 'Delete unused meta-information after'", "(never)"));
-    m_daysMetaInfos->setSuffix(ki18ncp("The suffix of 'Delete unused meta-information after'", " day", " days"));
-    m_daysMetaInfos->setValue(KateApp::self()->documentManager()->getDaysMetaInfos());
-    hlayout->addWidget(m_daysMetaInfos);
-    label->setBuddy(m_daysMetaInfos);
-    connect(m_saveMetaInfos, &QCheckBox::toggled, metaInfos, &QFrame::setEnabled);
-    connect(m_daysMetaInfos, static_cast<void (KPluralHandlingSpinBox::*)(int)>(&KPluralHandlingSpinBox::valueChanged), this, &KateConfigDialog::slotChanged);
-
-    vbox->addWidget(metaInfos);
-    buttonGroup->setLayout(vbox);
-
     // quick search
     buttonGroup = new QGroupBox(i18n("&Quick Open"), generalFrame);
     vbox = new QVBoxLayout;
     buttonGroup->setLayout(vbox);
     // quick open match mode
-    hlayout = new QHBoxLayout;
-    label = new QLabel(i18n("&Match Mode:"), buttonGroup);
+    auto hlayout = new QHBoxLayout;
+    auto label = new QLabel(i18n("&Match Mode:"), buttonGroup);
     hlayout->addWidget(label);
     m_cmbQuickOpenMatchMode = new QComboBox(buttonGroup);
     hlayout->addWidget(m_cmbQuickOpenMatchMode);
@@ -208,27 +169,37 @@ void KateConfigDialog::addSessionPage()
     item->setHeader(i18n("Session Management"));
     item->setIcon(QIcon::fromTheme(QStringLiteral("view-history")));
 
-    sessionConfigUi.reset(new Ui::SessionConfigWidget());
-    sessionConfigUi->setupUi(sessionsPage);
+    sessionConfigUi.setupUi(sessionsPage);
+
+    // save meta infos
+    sessionConfigUi.saveMetaInfos->setChecked(KateApp::self()->documentManager()->getSaveMetaInfos());
+    connect(sessionConfigUi.saveMetaInfos, &QGroupBox::toggled, this, &KateConfigDialog::slotChanged);
+
+    // meta infos days
+    sessionConfigUi.daysMetaInfos->setMaximum(180);
+    sessionConfigUi.daysMetaInfos->setSpecialValueText(i18nc("The special case of 'Delete unused meta-information after'", "(never)"));
+    sessionConfigUi.daysMetaInfos->setSuffix(ki18ncp("The suffix of 'Delete unused meta-information after'", " day", " days"));
+    sessionConfigUi.daysMetaInfos->setValue(KateApp::self()->documentManager()->getDaysMetaInfos());
+    connect(sessionConfigUi.daysMetaInfos, static_cast<void (KPluralHandlingSpinBox::*)(int)>(&KPluralHandlingSpinBox::valueChanged), this, &KateConfigDialog::slotChanged);
 
     // restore view  config
-    sessionConfigUi->restoreVC->setChecked(cgGeneral.readEntry("Restore Window Configuration", true));
-    connect(sessionConfigUi->restoreVC, &QCheckBox::toggled, this, &KateConfigDialog::slotChanged);
+    sessionConfigUi.restoreVC->setChecked(cgGeneral.readEntry("Restore Window Configuration", true));
+    connect(sessionConfigUi.restoreVC, &QCheckBox::toggled, this, &KateConfigDialog::slotChanged);
 
-    sessionConfigUi->spinBoxRecentFilesCount->setValue(recentFilesMaxCount());
-    connect(sessionConfigUi->spinBoxRecentFilesCount, static_cast<void (QSpinBox::*)(int)>(&QSpinBox::valueChanged), this, &KateConfigDialog::slotChanged);
+    sessionConfigUi.spinBoxRecentFilesCount->setValue(recentFilesMaxCount());
+    connect(sessionConfigUi.spinBoxRecentFilesCount, static_cast<void (QSpinBox::*)(int)>(&QSpinBox::valueChanged), this, &KateConfigDialog::slotChanged);
 
     QString sesStart(cgGeneral.readEntry("Startup Session", "manual"));
     if (sesStart == QLatin1String("new"))
-        sessionConfigUi->startNewSessionRadioButton->setChecked(true);
+        sessionConfigUi.startNewSessionRadioButton->setChecked(true);
     else if (sesStart == QLatin1String("last"))
-        sessionConfigUi->loadLastUserSessionRadioButton->setChecked(true);
+        sessionConfigUi.loadLastUserSessionRadioButton->setChecked(true);
     else
-        sessionConfigUi->manuallyChooseSessionRadioButton->setChecked(true);
+        sessionConfigUi.manuallyChooseSessionRadioButton->setChecked(true);
 
-    connect(sessionConfigUi->startNewSessionRadioButton, &QRadioButton::toggled, this, &KateConfigDialog::slotChanged);
-    connect(sessionConfigUi->loadLastUserSessionRadioButton, &QRadioButton::toggled, this, &KateConfigDialog::slotChanged);
-    connect(sessionConfigUi->manuallyChooseSessionRadioButton, &QRadioButton::toggled, this, &KateConfigDialog::slotChanged);
+    connect(sessionConfigUi.startNewSessionRadioButton, &QRadioButton::toggled, this, &KateConfigDialog::slotChanged);
+    connect(sessionConfigUi.loadLastUserSessionRadioButton, &QRadioButton::toggled, this, &KateConfigDialog::slotChanged);
+    connect(sessionConfigUi.manuallyChooseSessionRadioButton, &QRadioButton::toggled, this, &KateConfigDialog::slotChanged);
 }
 
 void KateConfigDialog::addPluginsPage()
@@ -363,23 +334,23 @@ void KateConfigDialog::slotApply()
     if (m_dataChanged) {
         KConfigGroup cg = KConfigGroup(config, "General");
 
-        cg.writeEntry("Restore Window Configuration", sessionConfigUi->restoreVC->isChecked());
+        cg.writeEntry("Restore Window Configuration", sessionConfigUi.restoreVC->isChecked());
 
-        cg.writeEntry("Recent File List Entry Count", sessionConfigUi->spinBoxRecentFilesCount->value());
+        cg.writeEntry("Recent File List Entry Count", sessionConfigUi.spinBoxRecentFilesCount->value());
 
-        if (sessionConfigUi->startNewSessionRadioButton->isChecked()) {
+        if (sessionConfigUi.startNewSessionRadioButton->isChecked()) {
             cg.writeEntry("Startup Session", "new");
-        } else if (sessionConfigUi->loadLastUserSessionRadioButton->isChecked()) {
+        } else if (sessionConfigUi.loadLastUserSessionRadioButton->isChecked()) {
             cg.writeEntry("Startup Session", "last");
         } else {
             cg.writeEntry("Startup Session", "manual");
         }
 
-        cg.writeEntry("Save Meta Infos", m_saveMetaInfos->isChecked());
-        KateApp::self()->documentManager()->setSaveMetaInfos(m_saveMetaInfos->isChecked());
+        cg.writeEntry("Save Meta Infos", sessionConfigUi.saveMetaInfos->isChecked());
+        KateApp::self()->documentManager()->setSaveMetaInfos(sessionConfigUi.saveMetaInfos->isChecked());
 
-        cg.writeEntry("Days Meta Infos", m_daysMetaInfos->value());
-        KateApp::self()->documentManager()->setDaysMetaInfos(m_daysMetaInfos->value());
+        cg.writeEntry("Days Meta Infos", sessionConfigUi.daysMetaInfos->value());
+        KateApp::self()->documentManager()->setDaysMetaInfos(sessionConfigUi.daysMetaInfos->value());
 
         cg.writeEntry("Modified Notification", m_modNotifications->isChecked());
         m_mainWindow->setModNotificationEnabled(m_modNotifications->isChecked());
diff --git a/kate/kateconfigdialog.h b/kate/kateconfigdialog.h
index 8b75c234e..97022ad30 100644
--- a/kate/kateconfigdialog.h
+++ b/kate/kateconfigdialog.h
@@ -18,8 +18,6 @@
 
 #include <KPageDialog>
 
-#include <memory>
-
 #ifdef WITH_KUSERFEEDBACK
 #include <KUserFeedback/FeedbackConfigWidget>
 #endif
@@ -84,14 +82,11 @@ private:
 
     QCheckBox *m_modNotifications;
     QCheckBox *m_modCloseAfterLast;
-    QCheckBox *m_saveMetaInfos;
-    KPluralHandlingSpinBox *m_daysMetaInfos;
     QComboBox *m_cmbQuickOpenMatchMode;
     QComboBox *m_cmbQuickOpenListMode;
     QSpinBox *m_tabLimit;
 
-    // Sessions Page
-    std::unique_ptr<Ui::SessionConfigWidget> sessionConfigUi;
+    Ui::SessionConfigWidget sessionConfigUi;
 
     QHash<KPageWidgetItem *, PluginPageListItem *> m_pluginPages;
     QList<KTextEditor::ConfigPage *> m_editorPages;
diff --git a/kate/ui/sessionconfigwidget.ui b/kate/ui/sessionconfigwidget.ui
index 80cb3e030..addc23263 100644
--- a/kate/ui/sessionconfigwidget.ui
+++ b/kate/ui/sessionconfigwidget.ui
@@ -6,23 +6,53 @@
    <rect>
     <x>0</x>
     <y>0</y>
-    <width>490</width>
-    <height>294</height>
+    <width>730</width>
+    <height>603</height>
    </rect>
   </property>
-  <layout class="QVBoxLayout" name="verticalLayout">
-   <property name="leftMargin">
-    <number>0</number>
-   </property>
-   <property name="topMargin">
-    <number>0</number>
-   </property>
-   <property name="rightMargin">
-    <number>0</number>
-   </property>
-   <property name="bottomMargin">
-    <number>0</number>
-   </property>
+  <layout class="QVBoxLayout" name="verticalLayout_4">
+   <item>
+    <widget class="QGroupBox" name="saveMetaInfos">
+     <property name="whatsThis">
+      <string>Check this if you want document configuration like for example bookmarks to be saved past editor sessions. The configuration will be restored if the document has not changed when reopened.</string>
+     </property>
+     <property name="title">
+      <string>Keep &amp;meta-information past sessions</string>
+     </property>
+     <property name="checkable">
+      <bool>true</bool>
+     </property>
+     <layout class="QVBoxLayout" name="verticalLayout">
+      <item>
+       <layout class="QHBoxLayout" name="horizontalLayout_2">
+        <item>
+         <widget class="QLabel" name="label_3">
+          <property name="text">
+           <string>&amp;Delete unused meta-information after:</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="KPluralHandlingSpinBox" name="daysMetaInfos"/>
+        </item>
+        <item>
+         <spacer name="horizontalSpacer_2">
+          <property name="orientation">
+           <enum>Qt::Horizontal</enum>
+          </property>
+          <property name="sizeHint" stdset="0">
+           <size>
+            <width>40</width>
+            <height>20</height>
+           </size>
+          </property>
+         </spacer>
+        </item>
+       </layout>
+      </item>
+     </layout>
+    </widget>
+   </item>
    <item>
     <widget class="QGroupBox" name="gbElements">
      <property name="title">
@@ -120,13 +150,20 @@
      <property name="sizeHint" stdset="0">
       <size>
        <width>20</width>
-       <height>0</height>
+       <height>40</height>
       </size>
      </property>
     </spacer>
    </item>
   </layout>
  </widget>
+ <customwidgets>
+  <customwidget>
+   <class>KPluralHandlingSpinBox</class>
+   <extends>QSpinBox</extends>
+   <header>kpluralhandlingspinbox.h</header>
+  </customwidget>
+ </customwidgets>
  <tabstops>
   <tabstop>spinBoxRecentFilesCount</tabstop>
   <tabstop>restoreVC</tabstop>
-- 
GitLab


From b16b597b39043e9675d5e9fcff11c23f2a9c67b2 Mon Sep 17 00:00:00 2001
From: Christoph Cullmann <cullmann@kde.org>
Date: Sun, 27 Sep 2020 18:36:23 +0200
Subject: [PATCH 3/3] move shutdown behavior to session page, like startup
 behavior

---
 kate/kateconfigdialog.cpp      |  17 ++---
 kate/kateconfigdialog.h        |   1 -
 kate/ui/sessionconfigwidget.ui | 129 +++++++++++++++++++--------------
 3 files changed, 80 insertions(+), 67 deletions(-)

diff --git a/kate/kateconfigdialog.cpp b/kate/kateconfigdialog.cpp
index 2b8ca0c2f..e8d5b7f2c 100644
--- a/kate/kateconfigdialog.cpp
+++ b/kate/kateconfigdialog.cpp
@@ -96,15 +96,6 @@ void KateConfigDialog::addBehaviorPage()
 
     vbox->addWidget(m_modNotifications);
 
-    // Closing last file closes Kate
-    m_modCloseAfterLast = new QCheckBox(i18n("Close Kate entirely when the last file is closed"), buttonGroup);
-    m_modCloseAfterLast->setChecked(m_mainWindow->modCloseAfterLast());
-    m_modCloseAfterLast->setWhatsThis(
-        i18n("If enabled, Kate will shutdown when the last file being edited is closed, "
-             "otherwise a blank page will open so that you can start a new file."));
-    connect(m_modCloseAfterLast, &QCheckBox::toggled, this, &KateConfigDialog::slotChanged);
-
-    vbox->addWidget(m_modCloseAfterLast);
     buttonGroup->setLayout(vbox);
 
     // quick search
@@ -200,6 +191,10 @@ void KateConfigDialog::addSessionPage()
     connect(sessionConfigUi.startNewSessionRadioButton, &QRadioButton::toggled, this, &KateConfigDialog::slotChanged);
     connect(sessionConfigUi.loadLastUserSessionRadioButton, &QRadioButton::toggled, this, &KateConfigDialog::slotChanged);
     connect(sessionConfigUi.manuallyChooseSessionRadioButton, &QRadioButton::toggled, this, &KateConfigDialog::slotChanged);
+
+    // Closing last file closes Kate
+    sessionConfigUi.modCloseAfterLast->setChecked(m_mainWindow->modCloseAfterLast());
+    connect(sessionConfigUi.modCloseAfterLast, &QCheckBox::toggled, this, &KateConfigDialog::slotChanged);
 }
 
 void KateConfigDialog::addPluginsPage()
@@ -355,8 +350,8 @@ void KateConfigDialog::slotApply()
         cg.writeEntry("Modified Notification", m_modNotifications->isChecked());
         m_mainWindow->setModNotificationEnabled(m_modNotifications->isChecked());
 
-        cg.writeEntry("Close After Last", m_modCloseAfterLast->isChecked());
-        m_mainWindow->setModCloseAfterLast(m_modCloseAfterLast->isChecked());
+        cg.writeEntry("Close After Last", sessionConfigUi.modCloseAfterLast->isChecked());
+        m_mainWindow->setModCloseAfterLast(sessionConfigUi.modCloseAfterLast->isChecked());
 
         cg.writeEntry("Quick Open Search Mode", m_cmbQuickOpenMatchMode->currentData().toInt());
         m_mainWindow->setQuickOpenMatchMode(m_cmbQuickOpenMatchMode->currentData().toInt());
diff --git a/kate/kateconfigdialog.h b/kate/kateconfigdialog.h
index 97022ad30..4df6ea27b 100644
--- a/kate/kateconfigdialog.h
+++ b/kate/kateconfigdialog.h
@@ -81,7 +81,6 @@ private:
     bool m_dataChanged = false;
 
     QCheckBox *m_modNotifications;
-    QCheckBox *m_modCloseAfterLast;
     QComboBox *m_cmbQuickOpenMatchMode;
     QComboBox *m_cmbQuickOpenListMode;
     QSpinBox *m_tabLimit;
diff --git a/kate/ui/sessionconfigwidget.ui b/kate/ui/sessionconfigwidget.ui
index addc23263..99402d709 100644
--- a/kate/ui/sessionconfigwidget.ui
+++ b/kate/ui/sessionconfigwidget.ui
@@ -12,43 +12,50 @@
   </property>
   <layout class="QVBoxLayout" name="verticalLayout_4">
    <item>
-    <widget class="QGroupBox" name="saveMetaInfos">
-     <property name="whatsThis">
-      <string>Check this if you want document configuration like for example bookmarks to be saved past editor sessions. The configuration will be restored if the document has not changed when reopened.</string>
-     </property>
+    <widget class="QGroupBox" name="gbAppStartup">
      <property name="title">
-      <string>Keep &amp;meta-information past sessions</string>
+      <string>Application Startup Behavior</string>
      </property>
-     <property name="checkable">
-      <bool>true</bool>
+     <layout class="QVBoxLayout" name="verticalLayout_2">
+      <item>
+       <widget class="QRadioButton" name="startNewSessionRadioButton">
+        <property name="text">
+         <string>&amp;Start new session</string>
+        </property>
+       </widget>
+      </item>
+      <item>
+       <widget class="QRadioButton" name="loadLastUserSessionRadioButton">
+        <property name="text">
+         <string>&amp;Load last used session</string>
+        </property>
+       </widget>
+      </item>
+      <item>
+       <widget class="QRadioButton" name="manuallyChooseSessionRadioButton">
+        <property name="text">
+         <string>&amp;Manually choose a session</string>
+        </property>
+       </widget>
+      </item>
+     </layout>
+    </widget>
+   </item>
+   <item>
+    <widget class="QGroupBox" name="groupBox">
+     <property name="title">
+      <string>Application Shutdown Behavior</string>
      </property>
-     <layout class="QVBoxLayout" name="verticalLayout">
+     <layout class="QVBoxLayout" name="verticalLayout_5">
       <item>
-       <layout class="QHBoxLayout" name="horizontalLayout_2">
-        <item>
-         <widget class="QLabel" name="label_3">
-          <property name="text">
-           <string>&amp;Delete unused meta-information after:</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="KPluralHandlingSpinBox" name="daysMetaInfos"/>
-        </item>
-        <item>
-         <spacer name="horizontalSpacer_2">
-          <property name="orientation">
-           <enum>Qt::Horizontal</enum>
-          </property>
-          <property name="sizeHint" stdset="0">
-           <size>
-            <width>40</width>
-            <height>20</height>
-           </size>
-          </property>
-         </spacer>
-        </item>
-       </layout>
+       <widget class="QCheckBox" name="modCloseAfterLast">
+        <property name="whatsThis">
+         <string>If enabled, Kate will shutdown when the last file being edited is closed, otherwise a blank page will open so that you can start a new file.</string>
+        </property>
+        <property name="text">
+         <string>Close Kate entirely when the last file is closed</string>
+        </property>
+       </widget>
       </item>
      </layout>
     </widget>
@@ -113,31 +120,43 @@
     </widget>
    </item>
    <item>
-    <widget class="QGroupBox" name="gbAppStartup">
+    <widget class="QGroupBox" name="saveMetaInfos">
+     <property name="whatsThis">
+      <string>Check this if you want document configuration like for example bookmarks to be saved past editor sessions. The configuration will be restored if the document has not changed when reopened.</string>
+     </property>
      <property name="title">
-      <string>Behaviour on Application Startup</string>
+      <string>Keep &amp;meta-information past sessions</string>
      </property>
-     <layout class="QVBoxLayout" name="verticalLayout_2">
-      <item>
-       <widget class="QRadioButton" name="startNewSessionRadioButton">
-        <property name="text">
-         <string>&amp;Start new session</string>
-        </property>
-       </widget>
-      </item>
-      <item>
-       <widget class="QRadioButton" name="loadLastUserSessionRadioButton">
-        <property name="text">
-         <string>&amp;Load last used session</string>
-        </property>
-       </widget>
-      </item>
+     <property name="checkable">
+      <bool>true</bool>
+     </property>
+     <layout class="QVBoxLayout" name="verticalLayout">
       <item>
-       <widget class="QRadioButton" name="manuallyChooseSessionRadioButton">
-        <property name="text">
-         <string>&amp;Manually choose a session</string>
-        </property>
-       </widget>
+       <layout class="QHBoxLayout" name="horizontalLayout_2">
+        <item>
+         <widget class="QLabel" name="label_3">
+          <property name="text">
+           <string>&amp;Delete unused meta-information after:</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="KPluralHandlingSpinBox" name="daysMetaInfos"/>
+        </item>
+        <item>
+         <spacer name="horizontalSpacer_2">
+          <property name="orientation">
+           <enum>Qt::Horizontal</enum>
+          </property>
+          <property name="sizeHint" stdset="0">
+           <size>
+            <width>40</width>
+            <height>20</height>
+           </size>
+          </property>
+         </spacer>
+        </item>
+       </layout>
       </item>
      </layout>
     </widget>
-- 
GitLab

