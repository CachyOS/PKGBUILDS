/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -a storageadaptor -i mtpstorage.h -l MTPStorage /home/pb/builds/KDE/KDE-Apps/kio-extras/src/kio-extras-18.12.0/mtp/shared/org.kde.kmtp.storage.xml
 *
 * qdbusxml2cpp is Copyright (C) 2018 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "storageadaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class StorageAdaptor
 */

StorageAdaptor::StorageAdaptor(MTPStorage *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

StorageAdaptor::~StorageAdaptor()
{
    // destructor
}

QString StorageAdaptor::description() const
{
    // get the value of property description
    return qvariant_cast< QString >(parent()->property("description"));
}

qulonglong StorageAdaptor::freeSpaceInBytes() const
{
    // get the value of property freeSpaceInBytes
    return qvariant_cast< qulonglong >(parent()->property("freeSpaceInBytes"));
}

qulonglong StorageAdaptor::maxCapacity() const
{
    // get the value of property maxCapacity
    return qvariant_cast< qulonglong >(parent()->property("maxCapacity"));
}

uint StorageAdaptor::createFolder(const QString &path)
{
    // handle method call org.kde.kmtp.Storage.createFolder
    return parent()->createFolder(path);
}

int StorageAdaptor::deleteObject(const QString &path)
{
    // handle method call org.kde.kmtp.Storage.deleteObject
    return parent()->deleteObject(path);
}

KMTPFile StorageAdaptor::getFileMetadata(const QString &path)
{
    // handle method call org.kde.kmtp.Storage.getFileMetadata
    return parent()->getFileMetadata(path);
}

int StorageAdaptor::getFileToFileDescriptor(const QDBusUnixFileDescriptor &descriptor, const QString &sourcePath)
{
    // handle method call org.kde.kmtp.Storage.getFileToFileDescriptor
    return parent()->getFileToFileDescriptor(descriptor, sourcePath);
}

int StorageAdaptor::getFileToHandler(const QString &path)
{
    // handle method call org.kde.kmtp.Storage.getFileToHandler
    return parent()->getFileToHandler(path);
}

KMTPFileList StorageAdaptor::getFilesAndFolders(const QString &path, int &exists)
{
    // handle method call org.kde.kmtp.Storage.getFilesAndFolders
    return parent()->getFilesAndFolders(path, exists);
}

int StorageAdaptor::sendFileFromFileDescriptor(const QDBusUnixFileDescriptor &descriptor, const QString &destinationPath)
{
    // handle method call org.kde.kmtp.Storage.sendFileFromFileDescriptor
    return parent()->sendFileFromFileDescriptor(descriptor, destinationPath);
}

int StorageAdaptor::setFileName(const QString &path, const QString &newName)
{
    // handle method call org.kde.kmtp.Storage.setFileName
    return parent()->setFileName(path, newName);
}


#include "storageadaptor.moc"
